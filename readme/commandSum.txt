git init
git add <file>
git commit
$ git log --pretty=oneline
 $ git reset --hard HEAD^
$ git reset --hard 3628164
撤销修改 git checkout -- readme.txt
撤销暂存区 git reset HEAD readme.txt

删除 $ git rm test.txt
提交删除 $ git commit -m "remove test.txt"
撤销删除 $ git checkout -- test.txt

克隆远程库
$ git clone git@github.com:flytian/gitskills.git

关联远程库
git remote add github git@github.com:michaelliao/learngit.git

删除已有的GitHub远程库
git remote rm origin


$ git checkout -b dev origin/dev [在本地创建与远程相应的dev分支]

先指定本地dev分支与远程origin/dev分支的连接 [不指定连接，拉pull不下来]
$ git branch --set-upstream dev origin/dev

$ git pull

把本地master分支的最新修改推送至GitHub
$ git push origin master

===================

创建分支 $ git branch dev
切换分支 $ git checkout dev
查看当前分支 $ git branch

git checkout命令加上-b参数表示创建并切换  $ git checkout -b dev

切换回原分支 $ git checkout master

git merge命令用于合并指定分支到当前分支 $ git merge dev [先切换到master分支，然会 merge指定分支dev]

删除分支 $ git branch -d dev [当前分支不能为dev分支]

查看分支的合并情况
$ git log --graph --pretty=oneline --abbrev-commit
准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：
$ git merge --no-ff -m "merge with no-ff" dev

=============
$ git stash  储藏分支
$ git stash list
git stash apply  git stash drop
$ git stash pop
强行删除分支  git branch -D feature-vulcan

===================

如果忘了打标签，找到历史提交的commit id，然后打上

$ git log --pretty=oneline --abbrev-commit [找commit id]
然后
$ git tag v0.9 6224937

可以用git show <tagname>查看标签信息 [获得标签 对应的  commitid author date 注释]

创建带有注释的标签
还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字
$ git tag -a v0.1 -m "version 0.1 released" 3628164

删除标签
$ git tag -d v0.1